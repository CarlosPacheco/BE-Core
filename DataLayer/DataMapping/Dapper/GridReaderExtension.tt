<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

/*
 * This file is auto-generated, do not edit.
 */

using System;
using Dapper;
using System.Collections.Generic;

 namespace Data.Mapping.Dapper
{
	public static class GridReaderExtension
	{
	<#
	  string types = "";
	  string args = "";
	for (int i = 8; i < 17; i++)
	{
		types+= " T"+ i +",";
		args+= ", T"+ i +" arg"+ i;
	#>	 
	    public static IList<TReturn> Read<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh,<#= types #> TReturn>(this SqlMapper.GridReader reader, Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh,<#= types #> TReturn> func, string splitOn = "id", bool buffered = true)
        {
            Type[] types = {
                typeof (TFirst),
                typeof (TSecond),
                typeof (TThird),
                typeof (TFourth),
                typeof (TFifth),
                typeof (TSixth),
                typeof (TSeventh)
				<#
				for (int j = 8; j <= i; j++)
				{
					PushIndent("				");
					WriteLine(",typeof(T"+j+")");
					ClearIndent(); 
				}
				#>        
            };

            return (IList<TReturn>)reader.Read(types, objects => func((TFirst)objects[0], (TSecond)objects[1], (TThird)objects[2], (TFourth)objects[3], (TFifth)objects[4], (TSixth)objects[5], (TSeventh)objects[6]
                    <#
					for (int j = 8; j <= i; j++)
					{
					#>
,(<#= "T"+j #>)objects[<#= j-1 #>]
					<#
					}
					#>
), splitOn, buffered);
        }	  
	<#
	}
	#>
}
}