#reference "~\ReferencedAssemblies\CrossCutting.Typewriter.dll" 
${

    //$Reference("D:\Dev\MyAsm.dll")
    //$Reference("tools\MyAsm.dll") // relative to the template
    //$Reference("~\tools\MyAsm.dll") // relative to the project's root
    //$Reference("~~\ProjectB\tools\MyAsm.dll") // relative to the solution's root.

    // Enable extension methods by adding using Typewriter.Extensions.*
    using Typewriter.Extensions.Types;
    using Typewriter.Extensions.WebApi;
    using CrossCutting.Typewriter;

    // Uncomment the constructor to change template settings.
    Template(Settings settings)
    {   
        settings.IncludeProject("Api.Realtime");
        settings.PartialRenderingMode = PartialRenderingMode.Combined;
        settings.OutputFilenameFactory = file => 
        {
            return $"..\\..\\..\\FE\\ALDA-UI\\src\\app\\core\\services\\" + file.Name.Replace("Hub.cs", ".hub.service.ts").ToLower();
        };
    }

    string Debug(Class c) => c.PrintDebug();
    string Debug(Interface i) => i.PrintDebug();

     // Change Hub to Service
    string ServiceName(Class c) => c.HubName();

    // change on to invoke
    string InvokeMethodName(Method m) => m.InvokeMethodName();

    // Turn void of SignalR into any
    string ReturnType(Method m) => m.ReturnType();

    // Get the non primitive paramaters so we can create the Imports at the
    // top of the service
    string ImportsList(Class c) => c.ImportsList();
 
    // Format the method based on the return type
    string MethodFormat(Method m) => m.MethodFormat();

}//The do not modify block below is intended for the outputted typescript files...
//*************************DO NOT MODIFY**************************
//
//THESE FILES ARE AUTOGENERATED WITH TYPEWRITER AND ANY MODIFICATIONS MADE HERE WILL BE LOST
//PLEASE VISIT http://frhagn.github.io/Typewriter/ TO LEARN MORE ABOUT THIS VISUAL STUDIO EXTENSION
//
//*************************DO NOT MODIFY**************************

import { Observable } from 'rxjs';
import { Injectable, OnDestroy } from '@angular/core';
import { environment } from '@env/environment';
import { SignalRHub } from '@app/core';
$Classes(:Hub)[$ImportsList
// ReSharper disable once InconsistentNaming
const API_BASE_URL: string = environment.apis.realtime + 'api/$Name';

@Injectable()
export class $ServiceName implements OnDestroy {
    // The connection to the websocket
    private hubConnection: SignalRHub;

    constructor() {
        this.hubConnection = new SignalRHub(API_BASE_URL);
        this.hubConnection.start();
    } 

    ngOnDestroy(): void {

    }
    $Methods(m=> !m.Attributes.Any(a => a.Name == "TypewriterIgnore"))[
    // $DocComment 
    // $HttpMethod: $Url      
    public $InvokeMethodName($Parameters[$name: $Type][, ]) {
        this.hubConnection.invoke("$name", $Parameters[$name][, ]); 
    }

    // $DocComment 
    // $HttpMethod: $Url 
    public $name(): Observable<$ReturnType> {
        return this.hubConnection.on("$name"); 
    }]

}]
