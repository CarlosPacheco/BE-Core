<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
/*
 * This file is auto-generated, do not edit.
*/
using System;
using Dapper;
using System.Collections.Generic;
using CrossCutting.SearchFilters;
using CrossCutting.SearchFilters.DataAccess;

namespace Business.Core.Data
{
	public partial class BaseDao
	{
		/// <summary>
        /// Get PagedResultSet from a execute query with not nested object with/without TotalCount using the IncludeMetada
        /// </summary>
        /// <param name="fullSqlQuery">Sql Query to execute</param>
        /// <param name="filter">The SearchFilter </param>
        /// <param name="param">Parameters to blind with the sql query</param>
		/// <param name="buffered"></param>
        /// <returns></returns>
		public IPaginatedList<TReturn> ExecutePagedQuery<TReturn>(Type[] types, Func<object[], TReturn> map, string fullSqlQuery, ISearchFilter filter, object param = null, string splitOn = "id", bool buffered = true)
        {
			// Paging construct helper
            string sqlGetQuery = PagedQueryBuilder.PagedQuery(fullSqlQuery, filter, ref param);

            SqlMapper.GridReader reader = DbConnection.QueryMultiple(sqlGetQuery, param, CurrentTransaction);

            IList<TReturn> entity = (IList<TReturn>)reader.Read(types, map, splitOn, buffered);

			int? totalCount = filter.IncludeMetadata ? reader.ReadSingleOrDefault<int?>() : null;

			return new PaginatedList<TReturn>(entity, filter, totalCount);
        }	  

	    /// <summary>
        /// Get PagedResultSet from a execute query with not nested object with/without TotalCount using the IncludeMetada
        /// </summary>
        /// <param name="fullSqlQuery">Sql Query to execute</param>
        /// <param name="filter">The SearchFilter </param>
        /// <param name="param">Parameters to blind with the sql query</param>
		/// <param name="buffered"></param>
        /// <returns></returns>
        public IPaginatedList<TReturn> ExecutePagedQuery<TReturn>(string fullSqlQuery, ISearchFilter filter, object param = null, bool buffered = true)
        {
            // Paging construct helper
            string sqlGetQuery = PagedQueryBuilder.PagedQuery(fullSqlQuery, filter, ref param);

            SqlMapper.GridReader reader = DbConnection.QueryMultiple(sqlGetQuery, param, CurrentTransaction);

            IEnumerable<TReturn> entity = reader.Read<TReturn>(buffered);
            int? totalCount = filter.IncludeMetadata ? reader.ReadSingleOrDefault<int?>() : null;

            return new PaginatedList<TReturn>(entity, filter, totalCount);
        }
	<#
	  string types = "T1, ";
	for (int i = 2; i < 17; i++)
	{
		types+= "T"+ i +", ";
	#>	 
		/// <summary>
        /// Get PagedResultSet from a execute query with not nested object with/without TotalCount using the IncludeMetada
        /// </summary>
        /// <param name="fullSqlQuery">Sql Query to execute</param>
        /// <param name="filter">The SearchFilter </param>
        /// <param name="param">Parameters to blind with the sql query</param>
		/// <param name="buffered"></param>
        /// <returns></returns>
	    public IPaginatedList<TReturn> ExecutePagedQuery<<#= types #>TReturn>(Func<<#= types #>TReturn> func, string fullSqlQuery, ISearchFilter filter, object param = null, string splitOn = "id", bool buffered = true)
        {
			// Paging construct helper
            string sqlGetQuery = PagedQueryBuilder.PagedQuery(fullSqlQuery, filter, ref param);

            SqlMapper.GridReader reader = DbConnection.QueryMultiple(sqlGetQuery, param, CurrentTransaction);
			<# if(i > 7) {  #> 
            Type[] types = {             
				<# for (int j = 1; j <= i; j++)
				{
					PushIndent("				");
					if(j == i) {
						Write("typeof(T"+ j +")"); 
					} else { 
						WriteLine("typeof(T"+ j +"),");
					};
					ClearIndent(); 
				} #>        
            };
			<# } #>

            IList<TReturn> entity = (IList<TReturn>)reader.Read(<# if(i < 8){ #>func<# } else { #>types, objects => func(<# for (int j = 1; j <= i; j++)
					{ 
						PushIndent("				");
						if(j == i) {
							Write("(T"+ j +")objects["+ (j-1) +"]");
						} else { 
							WriteLine("(T"+ j +")objects["+ (j-1) +"],");
						};
						ClearIndent(); 
					} #>)<# } #>, splitOn, buffered);

			int? totalCount = filter.IncludeMetadata ? reader.ReadSingleOrDefault<int?>() : null;

			return new PaginatedList<TReturn>(entity, filter, totalCount);
        }	  
	<#
	}
	#>
}
} 